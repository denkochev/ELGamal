package elgamal

import "math/big"

type GamalParams struct {
	// safe p prime number
	p *big.Int
	// p-1 value
	p_sub_1 *big.Int
	//
	g *big.Int
	// bit size of p
	bitSize int
}

// params for group
var gamalParams = GamalParams{
	/*
		A "safe prime" is an integer p
		 which is such that both p
		 and (p−1)/2
		 are prime. If you generate your modulus for ElGamal signatures are a "safe prime",
		 then there are only two prime factors of p−1: these are 2, and (p−1)/2
		.
	*/
	//p: FromHex("58b24e74e15b45483db571d78ee01067481713697e4c2c0ef7b069eec3693ab4efc2b13625413c69602e5ac2c80ad84754ba7d9dd4c499d6f1043e9e93d30427aa71d2d6784a4e8e69465318c657dd6f593ae5f948d9b3275b545401ac094ed738cf5ae6bb0f642cbdefba37062b64261f583c34e1024b1a192fe5807df3d55a6fac1c3b8a28a3900b46fb01ce1a2fe9ed6eebad75ff0752594b808cb50e135ba8da2002301f7fd008ec57b9933ec1767ed4ea9384b3ebd74e98b6dc61ff8e52e53eacc55fe9b97dd54f17e7a3dc2b7bb3aee3d870202d83e447216bf3833aef3a5d4e8b1c250569cb8f373f8e5deb2748e4f8227a4ea7122483422da7705578c734683b620e12f4583d03d41369c3c732fdd94d0fc4824ff318ae2d85fbad4c4e1f037c4d102f0b185a76c2d949f3483b16a1711a35c0bc4afe4e75eb1040d7d40ff1a925671e27bdc779fe3d7889e8599a374395d83648cf91a75f5a858b8adf4278537fadc4e91a64432e0007f158073654839eb969a813b60f2f58b2aa15d4b16abfae48f42efa726f197b4dc5a8ef6d05651fffd571e440733405800b2f873c62553b39858ba07b57c481ca233e5d83773124996110f8164c83d4b967c3a0fdd7e05ccfd5e78bbfa771835dad85f2cab4ca3b2b540a3"),

	p: FromHex("FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF"),

	//p_sub_1: FromHex("58b24e74e15b45483db571d78ee01067481713697e4c2c0ef7b069eec3693ab4efc2b13625413c69602e5ac2c80ad84754ba7d9dd4c499d6f1043e9e93d30427aa71d2d6784a4e8e69465318c657dd6f593ae5f948d9b3275b545401ac094ed738cf5ae6bb0f642cbdefba37062b64261f583c34e1024b1a192fe5807df3d55a6fac1c3b8a28a3900b46fb01ce1a2fe9ed6eebad75ff0752594b808cb50e135ba8da2002301f7fd008ec57b9933ec1767ed4ea9384b3ebd74e98b6dc61ff8e52e53eacc55fe9b97dd54f17e7a3dc2b7bb3aee3d870202d83e447216bf3833aef3a5d4e8b1c250569cb8f373f8e5deb2748e4f8227a4ea7122483422da7705578c734683b620e12f4583d03d41369c3c732fdd94d0fc4824ff318ae2d85fbad4c4e1f037c4d102f0b185a76c2d949f3483b16a1711a35c0bc4afe4e75eb1040d7d40ff1a925671e27bdc779fe3d7889e8599a374395d83648cf91a75f5a858b8adf4278537fadc4e91a64432e0007f158073654839eb969a813b60f2f58b2aa15d4b16abfae48f42efa726f197b4dc5a8ef6d05651fffd571e440733405800b2f873c62553b39858ba07b57c481ca233e5d83773124996110f8164c83d4b967c3a0fdd7e05ccfd5e78bbfa771835dad85f2cab4ca3b2b540a2"),

	p_sub_1: FromHex("ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199fffffffffffffffe"),

	g: FromHex("2"),

	bitSize: 4096,
}

func Params() *GamalParams {
	return &gamalParams
}

func (params *GamalParams) GetP() *big.Int {
	return params.p
}

func (params *GamalParams) Get_p_sub_1() *big.Int {
	return params.p_sub_1
}

func (params *GamalParams) GetG() *big.Int {
	return params.g
}

func (params *GamalParams) BitSize() int {
	return params.bitSize
}
